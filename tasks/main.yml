---
# tasks file for nats
# - when: nats_ver == 'latest'
#   block:
#     - name: Determine latest GitHub release (local)
#       # delegate_to: localhost
#       # become: false
#       uri:
#         url: "https://api.github.com/repos/nats-io/{{ nats_app }}/releases/latest"
#         body_format: json
#       register: _github_release
#       until: _github_release.status == 200
#       retries: 5

#     - name: Set latest_version
#       ansible.builtin.set_fact:
#         latest_ver: "{{ _github_release.json.tag_name
#           | regex_replace('^v?(.*)$', '\\1') }}"
#     - name: show version
#       ansible.builtin.debug:
#         msg: "{{ nats_app }} {{latest_ver}}"

- name: Gather os specific vars
  ansible.builtin.include_vars: "{{ item }}"
  with_first_found:
    - files:
        - '{{ ansible_distribution }}-{{ ansible_distribution_release }}.yml'
        - '{{ ansible_distribution }}.yml'
        - '{{ ansible_os_family }}.yml'
      skip: true
      paths:
        - '{{ role_path }}/vars'

- name: Gather os specific tasks
  ansible.builtin.include_tasks: "{{ item }}"
  with_first_found:
    - files:
        - '{{ ansible_distribution }}-{{ ansible_distribution_release }}.yml'
        - '{{ ansible_distribution }}.yml'
        - '{{ ansible_os_family }}.yml'
      skip: true
      paths:
        - '{{ role_path }}/tasks'


- name: Create directory {{ nats_bin_dir }}
  become: true
  become_user: root
  ansible.builtin.file: 
    path: "{{ nats_bin_dir }}" 
    mode: 0755
    state: directory

- name: Check for existing app in {{ nats_install_dir }}
  ansible.builtin.stat:
    path: '{{ nats_install_dir }}'
  changed_when: false
  register: app_binary

- name: Install if missing
  when: not app_binary.stat.exists
  block:
    - name: Download {{ nats_url }}
      ansible.builtin.get_url:
        url: '{{ nats_url }}'
        dest: '{{ nats_tmp_zip }}'
        mode: 0644

    - name: Create {{ nats_install_dir }}
      become: true
      become_user: root
      when: nats_map.mkdir
      ansible.builtin.file: 
        path: "{{ nats_install_dir }}" 
        mode: 0755
        state: directory

    - name: Uarchiving {{ nats_tmp_zip }}
      become: true
      become_user: root
      ansible.builtin.unarchive:
        remote_src: true
        src: '{{ nats_tmp_zip }}'
        dest: '{{ nats_install_dir if nats_map.mkdir else nats_parent_install_dir }}'
        # creates: '{{ nats_install_dir }}'

  always:
    - name: Remove {{ nats_tmp_zip }}
      become: true
      become_user: root
      ansible.builtin.file:
        path: '{{ nats_tmp_zip }}'
        state: absent

- name: Linking - {{ nats_link_src }}
  become: true
  become_user: root
  ansible.builtin.file:
    src: '{{ nats_link_src }}'
    dest: '{{ nats_link_dest }}'
    state: link

- name: Include in shell...
  become: true
  become_user: root
  with_items:
    - t: nats.sh.j2
      f: 'nats.sh'
      d: /etc/profile.d
  ansible.builtin.template:
    src: '{{ item.t }}'
    dest: '{{ item.d }}/{{ item.f }}'
    mode: '{{ item.m | default("0644") }}'

- name: Prepare for server
  when: nats_app == 'nats-server'
  ansible.builtin.include_tasks: main-server.yml
    
